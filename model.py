# -*- coding: utf-8 -*-
"""crop_recommendation_mlp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SItshpISuRhr5Eue9CzBgWxxFg6QJRXC
"""

from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.utils import np_utils
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder
from sklearn.pipeline import Pipeline
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from sklearn.neural_network import MLPClassifier
import pickle

df = pd.read_csv('Crop_recommendation.csv')

#df

df.info()

df.dropna()

X = df.drop(['label'],axis = 1)
y = df['label']

#X.head()

#y.head()

print(y.unique())

# normalize the features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split the data into features (X) and labels (y)
X = df.iloc[:, :-1]
y = df.iloc[:, -1]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=123)

# Create the MLPClassifier object with the desired parameters
mlp = MLPClassifier(hidden_layer_sizes=(36, 25,22), max_iter=1000, random_state=123)

# Train the model on the training data
mlp.fit(X_train, y_train)

# Evaluate the model on the test data
accuracy = mlp.score(X_test, y_test)
print("Accuracy:", accuracy)

#X_test.head()

# Example prediction
x = 1
test_sample = X_test.iloc[x, :].values.reshape(1, -1)
#test_sample = X_test[x].reshape(1,-1)
predicted_class = mlp.predict(test_sample)
print(test_sample)
# print("Predicted class for test sample:", predicted_class)

print(df.iloc[809])

# Make predictions on new data
new_data = [[85, 58, 41, 21.770462, 80.319644, 7.038096, 226.655537]]
predictions = mlp.predict(new_data)
print("Predictions:", predictions)

pickle.dump(mlp, open('model.pkl','wb'))

model = pickle.load(open('model.pkl','rb'))
print(model.predict([[4, 300, 500]]))